# Novel-Writing App Documentation

This document provides a comprehensive overview of the Novel-Writing App, including its features, architecture, and integration with the OpenRouter API for LLM access.

## I. Introduction

The Novel-Writing App is designed to assist users in creating novels, from initial brainstorming to final chapter writing.  It leverages the power of Large Language Models (LLMs) through the OpenRouter API to provide writing assistance, generate prompts, and enhance the overall creative process.

## II. Key Features

* **Genre and Book Type Selection:** Users begin by selecting their preferred genre and book type, providing a foundation for the creative process.
* **Famous Writers and Locations:**  Inspiration is drawn from famous authors and settings, helping users establish a writing style and context.
* **Character Development:** A robust system allows users to create and manage multi-dimensional characters with detailed profiles.  This section utilizes a visually appealing interface with character cards, a progress bar, and interactive buttons. The UI is styled using Tailwind CSS, incorporating vibrant gradients and glowing effects for an enhanced user experience.
* **Plot Development:** Users can outline their novels, defining key plot points and structuring chapters using interactive tools.
* **Writing Workspace:** A dedicated writing environment provides tools for composing chapters, tracking word count, and saving progress.
* **LLM Integration (OpenRouter API):** Seamless integration with OpenRouter allows access to LLMs like Claude and ChatGPT for assistance with brainstorming, prompt generation, and content creation.  This integration utilizes the OAuth PKCE flow for secure authentication and token management.
* **Gradient & Glow Style:** A visually appealing user interface (UI) is maintained throughout the application, using vibrant gradients and glowing effects.
* **Responsive Design:** The app is designed to be responsive across various screen sizes, ensuring a consistent user experience.
* **Dynamic Content Rendering:** JavaScript dynamically updates content based on user interactions and API responses.
* **Error Handling and Logging:** Comprehensive error handling is implemented, with detailed logging for failed API calls, token management issues, and workflow interactions.  A change log (`change_log.txt`) tracks development progress, troubleshooting, and modifications.
* **Interactive Feedback:**  Gamified progress tracking and fun feedback animations enhance user engagement.


## III. Architecture

The app is built using HTML, JavaScript, and Tailwind CSS.  The core functionality is managed by `main.js`, while API settings are handled by `settings.js`.  Each major step in the novel-writing process (Introduction, Character Development, Plot Development, etc.) has its own HTML and JavaScript files (e.g., `character-development.html`, `character-development.js`).

## IV. OpenRouter API Integration

The app integrates with the OpenRouter API to access LLMs.  Security is ensured through the OAuth PKCE flow, which involves:

1. **Authentication:** Users are redirected to OpenRouter for authentication.
2. **Authorization Code:** Upon successful login, OpenRouter redirects the user back to the app with an authorization code.
3. **API Key Exchange:** The authorization code is exchanged for an API key.
4. **LLM Interaction:** The API key is used to make requests to OpenRouter's API for LLM interaction.

Detailed instructions on the OAuth PKCE flow and API key management are available in `openarouterconnectionsdocs.txt`.  Example API calls are provided in `openrouter_quickstart_APi_docs_completion.txt`.

## V. Character Development Module

This module allows users to create and manage characters for their novel.  Key features include:

* **Character Creation:** Users can input character details such as name, role (protagonist, antagonist, supporting), description, and motivation.
* **AI-Assisted Generation:** The `generateCharacterWithAI` function uses the OpenRouter API to generate character details based on the selected role.  This function sends a request to the `/api/v1/chat/completions` endpoint with the API key (retrieved from local storage), the selected role, and a prompt requesting character details. The response is parsed to extract the generated character information (name, description, motivation).
* **UI Elements:** The UI includes input fields for character details, buttons for adding characters and generating details with AI, and a display area to show created characters.  Tailwind CSS is used for styling, with gradients and glowing effects.
* **Local Storage:** Character data is stored in the browser's local storage using `localStorage`.
* **Error Handling:** Error messages are displayed to the user if there are issues with API calls, form input, or data processing.
* **Progress Tracking:** A progress bar visually indicates the user's progress through the character development stage.

The JavaScript functions involved in this module are:

* `addCharacter`: Adds a manually created character to local storage and displays it on the page.
* `generateCharacterWithAI`: Uses the OpenRouter API to generate character details based on user input and the selected AI model.
* `loadCharacters`: Loads characters from local storage on page load.
* `clearForm`: Clears the character creation form.
* `showError`, `showSuccess`, `showLoading`: Helper functions to display feedback messages to the user.

## VI. Error Handling

The app incorporates robust error handling mechanisms to manage potential issues, including:

* **API Errors:** Detailed error messages are displayed for failed API calls.
* **Token Management:** Errors related to invalid or expired tokens are handled gracefully.
* **Workflow Interactions:** Errors during user interactions are logged and reported.

## VII. Change Log

A change log (`change_log.txt`) is maintained to track all development progress, troubleshooting steps, and modifications made to the application.  This ensures smooth future development and facilitates easy migration to other LLMs if needed.

## VIII. Future Enhancements

* **Improved LLM Interaction:** Explore more advanced LLM capabilities for more sophisticated writing assistance.
* **User Profile Management:** Implement user accounts for saving progress and preferences.
* **Collaboration Features:** Allow multiple users to collaborate on a single novel.


