Task:
You are helping with a Novel-Writing App built using HTML, JavaScript, and Tailwind CSS. Focus only on style changes. Do not touch any functionality or other parts of the code.

Instructions:

Step by step: Always break down bigger tasks into smaller, manageable steps.
Apply consistent styles across the app, using blue for all buttons and headers.
Use emojis before text in headers and buttons. Resize them appropriately (bigger for headers, matching text for buttons).
Stick to the style used on the Plot Development page for the rest of the app.
Important:

Do not alter any existing functionality—focus only on the requested style changes.
No missing code—always include the complete file content.
Let me test after each major change to ensure everything is working correctly<prompt>
  <context>
    You are assisting in the development of a Novel-Writing App with OpenRouter API integration for leveraging LLM models like Claude and ChatGPT. The app is built using HTML, JavaScript, and Tailwind CSS, with a focus on a vibrant, glowing, gradient style and providing an excellent user experience (UX). Think step-by-step and break big tasks into smaller steps when necessary.
    Additionally, use the new inspect_site tool to capture screenshots and console logs for better debugging and improvement suggestions.
  </context>
  
  <project_overview>
    <step>Introduction Screen: Users select their genre and book type.</step>
    <step>Famous Writers and Locations: Users get inspired by famous authors and choose settings.</step>
    <step>Character Development: Users create and edit multidimensional characters.</step>
    <step>Plot Development: Users outline their novels with key plot points.</step>
    <step>Writing Workspace: Users write chapters with LLM assistance, track word count, and save progress.</step>
    <step>Interactive Elements: Gamified progress and fun feedback animations are integrated.</step>
    The app includes API integration for connecting to OpenRouter and managing user inputs for AI models, with OAuth PKCE flow and token management for security.
  </project_overview>

  <key_features>
    <feature>Gradient & Glow Style: Consistent UI using gradients, glowing effects, and vibrant colors.</feature>
    <feature>Responsive Design: Tailwind CSS ensures a responsive layout across different screen sizes.</feature>
    <feature>Dynamic Content Rendering: JavaScript dynamically updates content based on user selections and API responses.</feature>
    <feature>OpenRouter API: Integration with LLMs for writing assistance, secured with OAuth PKCE.</feature>
    <feature>Inspect Site Tool: Capture screenshots and console logs for enhanced debugging and troubleshooting.</feature>
  </key_features>

  <objective>
    Help refine and build the remaining features of the app by:
    - Ensuring API connections are stable and secure (OpenRouter for AI).
    - Reviewing all files for UX and performance improvements, making sure the new Inspect Site tool is used to capture logs and screenshots.
    - Maintaining design consistency: Vibrant, glowing gradients and seamless user experience.
    - Interactive Feedback: Create a fun and interactive user experience with animations, feedback, and progress tracking.
    - Implementing a changelog function that tracks any modifications made. Always confirm with me before updating the changelog to ensure that all tests were successful.
  </objective>

  <current_structure>
    <html_files>For each major step (e.g., character-development.html, famous-writers.html).</html_files>
    <javascript>Handles dynamic content (main.js for core functionality, settings.js for API settings).</javascript>
    <tailwind_css>Ensures modern design with glowing effects and gradients.</tailwind_css>
    <api_documentation>Includes integration with OpenRouter's LLM models like Claude for generating content.</api_documentation>
  </current_structure>

  <request>
    Please help improve and complete the development of this app, ensuring secure API handling, design consistency, and enhanced user experience across all steps. Additionally, implement the change log function to track progress and changes made. Ensure that the new Inspect Site tool is utilized effectively for troubleshooting and refinement. Major changes should be tested thoroughly before updating the change log.
  </request>

<important>DO NOT NEVER EVER IN ANY CIRCUMSTANCES : comments like this:
// ... (remaining code stays the same) and the code is THE MISSING. ALWAYS:  present the entire file content, ensuring all necessary functions are included</important>

Also AFTER ANY MAJOR CHANGES LET ME TEST THE PROGRASS AND REPORT TO MAKE SURE ALL WORKS FINE!

</prompt>
.